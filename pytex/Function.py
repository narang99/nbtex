
#################################################
### THIS FILE WAS AUTOGENERATED! DO NOT EDIT! ###
#################################################
# file to edit: dev_nb/Function.ipynb
from pytex.Variable import Var, makeVar
from pytex.helpers import varArgFunc

class SeriesTemplate(Var):
    def __init__(self, seriesLatex, func, it='i', lower=None, upper=None):
        super().__init__(seriesLatex)
        self.it = makeVar(it)
        self.f = makeVar(func)
        self.lower, self.upper, self.seriesLatex = lower, upper, seriesLatex
    # non callable
    def __call__(self):
        raise Exception('summation is non callable')
    def build(self):
        lower = ''
        if self.lower is not None:
            l = makeVar(self.lower)
            lower = r"_{" + self.it.build() + "=" + l.build() + "}"
        else:
            lower = r"_{" + self.it.build() + "}"
        upper = ''
        if self.upper is not None:
            u = makeVar(self.upper)
            upper = r"^" + r"{" + u.build() + "}"
        else: upper = ''
        return self.seriesLatex + lower + upper + ' ' + self.f.build()

class Sum(SeriesTemplate):
    def __init__(self, func, it='i', lower=None, upper=None):
        super().__init__(r'\sum', func, it, lower, upper)

class Product(SeriesTemplate):
    def __init__(self, func, it='i', lower=None, upper=None):
        super().__init__(r'\prod', func, it, lower, upper)


class Partial(Var):
    def __init__(self, wrt, degree=1):
        super().__init__('partial')
        self.degree, self.wrt = makeVar(degree, wrt)
    def __str__(self):
        return f"partial wrt {self.wrt.build()} degree {self.degree.build()}"
    def build(self):
        degree = self.degree.name
        deg = ('^{' + makeVar(self.degree).build()) + '}' if degree != '1' else ''
        wrt = pow(self.wrt, self.degree).build() if degree != '1' else self.wrt.build()
        return r"\frac{\partial " + deg + "}{\partial " + " " + wrt + "}"

def makePartial(*args):
    return varArgFunc(lambda arg: Partial(*arg) if not isinstance(arg, Partial) else arg, *args)

class Derivative(Var):
    def __init__(self, wrt, degree=1):
        super().__init__('derivative')
        self.wrt, self.degree = makeVar(wrt, degree)
    def build(self):
        degree = self.degree.name
        deg = ('^{' + makeVar(self.degree).build()) + '}' if degree != '1' else ''
        wrt = pow(self.wrt, self.degree).build() if degree != '1' else self.wrt.build()
        return r"\frac{d" + deg + "}{d" + " " + wrt + "}"

def makeDerivative(*args):
    return varArgFunc(lambda arg: (Derivative(*arg) if not isinstance(arg, Derivative)
                                   else arg), *args)