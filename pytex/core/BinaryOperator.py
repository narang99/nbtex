
#################################################
### THIS FILE WAS AUTOGENERATED! DO NOT EDIT! ###
#################################################
# file to edit: dev_nb/BinaryOperator.ipynb
from pytex.LatexInterface import Operator, Set
from pytex.core.Precedence import PRECEDENCE

class BinaryOperator():
    def __init__(self):
        self._is_inverted, self._precedence = False, None
    @property
    def latex(self):
        raise NotImplementedError()
    @property
    def precedence(self):
        return self._precedence
    def __invert__(self):
        self._is_inverted = not self._is_inverted
        return self

class PlusOperator(BinaryOperator):
    def __init__(self):
        super().__init__()
        self._precedence = PRECEDENCE.ARITHMATIC_ADD
    @property
    def latex(self):
        return Operator.plus

class MinusOperator(BinaryOperator):
    def __init__(self):
        super().__init__()
        self._precedence = PRECEDENCE.ARITHMATIC_ADD
    @property
    def latex(self):
        return Operator.minus

class MultiplyOperator(BinaryOperator):
    def __init__(self):
        super().__init__()
        self._precedence = PRECEDENCE.ARITHMATIC_MULT
    @property
    def latex(self):
        return Operator.multiply

class EqualOperator(BinaryOperator):
    def __init__(self):
        super().__init__()
        self._precedence = PRECEDENCE.EQUALITY
    @property
    def latex(self):
        return Operator.neq if self._is_inverted else Operator.eq


class ComparisonOperator(BinaryOperator):
    def __init__(self):
        super().__init__()
        self._precedence = PRECEDENCE.COMPARE

class LessThanOperator(ComparisonOperator):
    def __init__(self):
        super().__init__()
    @property
    def latex(self):
        return Operator.nless if self._is_inverted else Operator.lt

class GreaterThanOperator(ComparisonOperator):
    def __init__(self):
        super().__init__()
    @property
    def latex(self):
        return Operator.ngtr if self._is_inverted else Operator.gt

class LessThanEqualOperator(ComparisonOperator):
    def __init__(self):
        super().__init__()
    @property
    def latex(self):
        return Operator.nleq if self._is_inverted else Operator.leq

class GreaterThanEqualOperator(ComparisonOperator):
    def __init__(self):
        super().__init__()
    @property
    def latex(self):
        return Operator.ngeq if self._is_inverted else Operator.geq

class PowerOperator(BinaryOperator):
    def __init__(self):
        super().__init__()
        self._precedence = PRECEDENCE.POWER
    @property
    def latex(self):
        return Operator.power

class SpaceOperator(BinaryOperator):
    def __init__(self):
        super().__init__()
        self._precedence = PRECEDENCE.EQUALITY
    @property
    def latex(self):
        return Operator.space

Plus = PlusOperator()
Minus = MinusOperator()
Multiply = MultiplyOperator()
Power = PowerOperator()
Equal = EqualOperator()
LessThan = LessThanOperator()
LessThanEqual = LessThanEqualOperator()
GreaterThan = GreaterThanOperator()
GreaterThanEqual = GreaterThanEqualOperator()
Space = SpaceOperator()