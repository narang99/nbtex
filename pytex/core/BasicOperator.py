
#################################################
### THIS FILE WAS AUTOGENERATED! DO NOT EDIT! ###
#################################################
# file to edit: dev_nb/BasicOperator.ipynb
from pytex.core.Precedence import PRECEDENCE
from pytex.LatexInterface import LatexStringFormatter, Operator
from functools import partial

class BasicOperator:
    def __init__(self, precedence, combine):
         self._precedence, self._combine = precedence, combine
    def __call__(self, *args):
        return self._combine(*args)
    @property
    def precedence(self):
        return self._precedence

class InvertibleOperator(BasicOperator):
    def __init__(self, precedence, combine, invert_combine=None):
        super().__init__(precedence, combine)
        self._invert_combine = invert_combine

    def __invert__(self):
        if self._invert_combine is not None:
            return InvertibleOperator(self.precedence, self._invert_combine, self._combine)
        else:
            return self

def infix_combines(op1, op2):
    return (partial(LatexStringFormatter.binary_operation_output, op1),
           partial(LatexStringFormatter.binary_operation_output, op2))

class InvertibleInfixOperator(InvertibleOperator):
    def __init__(self, precedence, op, invert_op=None):
        c, invc = infix_combines(op, invert_op)
        if invert_op is None:
            super().__init__(precedence, c)
        else:
            super().__init__(precedence, c, invc)

Plus = InvertibleInfixOperator(PRECEDENCE.ARITHMATIC_ADD, Operator.plus)
Minus = InvertibleInfixOperator(PRECEDENCE.ARITHMATIC_ADD, Operator.minus)
Multiply = InvertibleInfixOperator(PRECEDENCE.ARITHMATIC_MULT, Operator.multiply)
Equal = InvertibleInfixOperator(PRECEDENCE.EQUALITY, Operator.eq, Operator.neq)
LessThan = InvertibleInfixOperator(PRECEDENCE.COMPARE, Operator.lt, Operator.nless)
LessThanEqual = InvertibleInfixOperator(PRECEDENCE.COMPARE, Operator.leq, Operator.nleq)
GreaterThan = InvertibleInfixOperator(PRECEDENCE.COMPARE, Operator.gt, Operator.ngtr)
GreaterThanEqual = InvertibleInfixOperator(PRECEDENCE.COMPARE, Operator.geq, Operator.ngeq)
Power = InvertibleInfixOperator(PRECEDENCE.POWER, Operator.power)
Space = InvertibleInfixOperator(PRECEDENCE.EQUALITY, Operator.space)