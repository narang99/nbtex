
#################################################
### THIS FILE WAS AUTOGENERATED! DO NOT EDIT! ###
#################################################
# file to edit: dev_nb/LatexFormatter.ipynb
class LatexStringFormatter:
    def __init__(self):
        pass

    @staticmethod
    def binary_operation_output(binary_operator, a1, a2):
        return f'{a1} {binary_operator} {a2}'

    @staticmethod
    def surround_with_parens(string):
        return f'({string})'

    @staticmethod
    def negate(string):
        if string[0] == '-': return string
        else: return f'-{string}'

    @staticmethod
    def unnegate(string):
        return string[1:] if(string[0] == '-') else string

    @staticmethod
    def fraction(num, den):
        num, den = LatexStringFormatter.surround_all_with_braces(num, den)
        return f'\\frac{num}{den}'

    @staticmethod
    def subscript(string):
        return f'_{string}'
    @staticmethod
    def superscript(string):
        return f'^{string}'

    @staticmethod
    def surround_with_braces(string):
        return '{' + string + '}'

    @staticmethod
    def surround_all_with_braces(*args):
        if len(args) == 1: return LatexStringFormatter.surround_with_braces(args[0])
        else: return [LatexStringFormatter.surround_with_braces(arg) for arg in args]

    @staticmethod
    def root(num, nth):
        return (r"\sqrt[\leftroot{-1}\uproot{1}" + nth
               + r"]{" + num + r"}")

class LatexSeriesFormatter():
    @staticmethod
    def integral(func, wrt, lower=None, upper=None):
        func, wrt, lower, upper = LatexSeriesFormatter.preprocess_args(func, f'd{wrt}', lower, upper)
        return f'\\int{lower}{upper}{func} {wrt}'

    @staticmethod
    def partial_integral(func, wrt, lower=None, upper=None):
        func, wrt, lower, upper = LatexSeriesFormatter.preprocess_args(func, f'\\partial {wrt}',
                                                                       lower, upper)
        return f'\\int{lower}{upper}{func} {wrt}'

    @staticmethod
    def summation(func, wrt, lower=None, upper=None):
        lower = f'{wrt}={lower}' if lower is not None else wrt
        func, _, lower, upper = LatexSeriesFormatter.preprocess_args(func, wrt, lower, upper)
        return f'\\sum{lower}{upper} {func}'

    @staticmethod
    def product(func, wrt, lower=None, upper=None):
        lower = f'{wrt}={lower}' if lower is not None else wrt
        func, _, lower, upper = LatexSeriesFormatter.preprocess_args(func, wrt, lower, upper)
        return f'\\prod{lower}{upper} {func}'

    @staticmethod
    def preprocess_args(func, wrt, lower, upper):
        lower, upper = LatexSeriesFormatter.format_lower_upper(lower, upper)
        func, wrt = LatexStringFormatter.surround_all_with_braces(func, wrt)
        return func, wrt, lower, upper

    @staticmethod
    def format_lower_upper(lower, upper):
        lower = LatexStringFormatter.surround_with_braces(lower) if lower is not None else ''
        if lower is not None:
            lower = LatexStringFormatter.subscript(lower)

        upper = LatexStringFormatter.surround_with_braces(upper) if upper is not None else ''
        if upper is not None:
            upper = LatexStringFormatter.superscript(upper)
        return lower, upper

class LatexSeriesFormatter():
    @staticmethod
    def integral(func, wrt, lower=None, upper=None):
        func, wrt, lower, upper = LatexSeriesFormatter.preprocess_args(func, f'd{wrt}', lower, upper)
        return f'\\int{lower}{upper}{func} {wrt}'

    @staticmethod
    def partial_integral(func, wrt, lower=None, upper=None):
        func, wrt, lower, upper = LatexSeriesFormatter.preprocess_args(func, f'\\partial {wrt}',
                                                                       lower, upper)
        return f'\\int{lower}{upper}{func} {wrt}'

    @staticmethod
    def summation(func, wrt, lower=None, upper=None):
        lower = f'{wrt}={lower}' if lower is not None else wrt
        func, _, lower, upper = LatexSeriesFormatter.preprocess_args(func, wrt, lower, upper)
        return f'\\sum{lower}{upper} {func}'

    @staticmethod
    def product(func, wrt, lower=None, upper=None):
        lower = f'{wrt}={lower}' if lower is not None else wrt
        func, _, lower, upper = LatexSeriesFormatter.preprocess_args(func, wrt, lower, upper)
        return f'\\prod{lower}{upper} {func}'

    @staticmethod
    def preprocess_args(func, wrt, lower, upper):
        lower, upper = LatexSeriesFormatter.format_lower_upper(lower, upper)
        func, wrt = LatexStringFormatter.surround_all_with_braces(func, wrt)
        return func, wrt, lower, upper

    @staticmethod
    def format_lower_upper(lower, upper):
        lower = LatexStringFormatter.surround_with_braces(lower) if lower is not None else ''
        if lower is not None:
            lower = LatexStringFormatter.subscript(lower)

        upper = LatexStringFormatter.surround_with_braces(upper) if upper is not None else ''
        if upper is not None:
            upper = LatexStringFormatter.superscript(upper)
        return lower, upper

def is_one_word(expr):
    for w in expr:
        if not w.isalnum() and w != '_' and w != '^':
            return False
    return True

class LatexDerivativesFormatter():
    @staticmethod
    def partial(wrt):
        return LatexStringFormatter.fraction('\\partial', f'\\partial {wrt}')
    @staticmethod
    def partial_of(wrt, function):
        if(not is_one_word(function)):
            function = LatexStringFormatter.surround_with_parens(function)
        return LatexStringFormatter.fraction(f'\\partial {function}', f'\\partial {wrt}')

    @staticmethod
    def derivative(wrt):
        return LatexStringFormatter.fraction('d', f'd{wrt}')
    @staticmethod
    def derivative_of(wrt, function):
        if(not is_one_word(function)):
            function = LatexStringFormatter.surround_with_parens(function)
        return LatexStringFormatter.fraction(f'd({function})', f'd{wrt}')